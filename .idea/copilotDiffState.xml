<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wallify/feature/wallify/home/home_screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wallify/feature/wallify/home/home_screen.kt" />
              <option name="originalContent" value="package com.example.wallify.feature.wallify.home&#10;import CategoryMasonryList&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.ScrollableTabRow&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.wallify.common.widgets.appbar.TAppBar&#10;import com.example.wallify.feature.wallify.home.widgets.BannerCarousel&#10;import com.example.wallify.feature.wallify.home.widgets.BrandHorizontalScroll&#10;import com.example.wallify.feature.wallify.home.widgets.TSubAppbarHome&#10;import com.example.wallify.navigation.NavigationMenu&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.feature.wallify.home.viewmodel.BannerViewModel&#10;import sampleCategories&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    modifier: Modifier = Modifier,&#10;    navController: NavController,&#10;){&#10;    val bannerViewModel: BannerViewModel = hiltViewModel()&#10;    val banners by bannerViewModel.banners.collectAsState()&#10;    val isLoading = bannerViewModel.isLoading&#10;    val errorMessage = bannerViewModel.errorMessage&#10;    val categories = sampleCategories&#10;    var selectedTabIndex by remember { mutableStateOf(0) }&#10;    val pagerState = rememberPagerState(pageCount = { categories.size })&#10;    val pagerStateBanner = rememberPagerState(pageCount = { banners.size })&#10;&#10;    // Sync pager and tab selection&#10;    LaunchedEffect(selectedTabIndex) {&#10;        pagerState.scrollToPage(selectedTabIndex)&#10;    }&#10;    LaunchedEffect(pagerState.currentPage) {&#10;        selectedTabIndex = pagerState.currentPage&#10;    }&#10;&#10;    Scaffold (&#10;        topBar = {&#10;            TAppBar(&#10;                title = {&#10;                    TSubAppbarHome(&#10;                      onAvatarClick = {&#10;                            navController.navigate(Screen.Setting.route)&#10;                      }&#10;                    )&#10;                },&#10;                navController = navController&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationMenu(&#10;                navController = navController&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column (&#10;            modifier = Modifier.fillMaxSize()&#10;                .padding(innerPadding))&#10;         {&#10;            //banner and search&#10;            when {&#10;                isLoading -&gt; {&#10;                    Text(&quot;Loading banners...&quot;)&#10;                }&#10;                errorMessage != null -&gt; {&#10;                    Log.d(&quot;BannerList&quot;, &quot;Banners: $errorMessage&quot;)&#10;                    Text(&quot;Error: $errorMessage&quot;)&#10;                }&#10;                banners.isEmpty() -&gt; {&#10;                    Text(&quot;Không có banner nào&quot;)&#10;                }&#10;                else -&gt; {&#10;                    BannerCarousel(&#10;                        banners = banners,&#10;                        pagerState = pagerStateBanner&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(TSizes.xs))&#10;            // brand&#10;            BrandHorizontalScroll(navController = navController)&#10;            Spacer(modifier = Modifier.height(TSizes.sm))&#10;&#10;            // Category tabs&#10;            ScrollableTabRow(&#10;                selectedTabIndex = selectedTabIndex,&#10;                edgePadding = 8.dp&#10;            ) {&#10;                categories.forEachIndexed { index, category -&gt;&#10;                    Tab(&#10;                        selected = selectedTabIndex == index,&#10;                        onClick = { selectedTabIndex = index },&#10;                        text = { Text(category.title) }&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(TSizes.sm))&#10;            HorizontalPager(&#10;                state = pagerState,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(220.dp)&#10;            ) { page -&gt;&#10;                val category = categories[page]&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                        .clip(RoundedCornerShape(26.dp))&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(id = category.imageRes),&#10;                        contentDescription = category.title,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.matchParentSize()&#10;                    )&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .matchParentSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(Color.Transparent, Color.Black.copy(alpha = 0.5f))&#10;                                )&#10;                            )&#10;                    )&#10;                    Text(&#10;                        text = category.title,&#10;                        color = Color.White,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(18.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.wallify.feature.wallify.home&#10;import CategoryMasonryList&#10;import android.util.Log&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.ScrollableTabRow&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.wallify.common.widgets.appbar.TAppBar&#10;import com.example.wallify.feature.wallify.home.widgets.BannerCarousel&#10;import com.example.wallify.feature.wallify.home.widgets.BrandHorizontalScroll&#10;import com.example.wallify.feature.wallify.home.widgets.TSubAppbarHome&#10;import com.example.wallify.navigation.NavigationMenu&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.feature.wallify.home.viewmodel.BannerViewModel&#10;import sampleCategories&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    modifier: Modifier = Modifier,&#10;    navController: NavController,&#10;){&#10;    val bannerViewModel: BannerViewModel = hiltViewModel()&#10;    val banners by bannerViewModel.banners.collectAsState()&#10;    val isLoading = bannerViewModel.isLoading&#10;    val errorMessage = bannerViewModel.errorMessage&#10;    val categories = sampleCategories&#10;    var selectedTabIndex by remember { mutableStateOf(0) }&#10;    val pagerState = rememberPagerState(pageCount = { categories.size })&#10;    val pagerStateBanner = rememberPagerState(pageCount = { banners.size })&#10;&#10;    // Sync pager and tab selection&#10;    LaunchedEffect(selectedTabIndex) {&#10;        pagerState.scrollToPage(selectedTabIndex)&#10;    }&#10;    LaunchedEffect(pagerState.currentPage) {&#10;        selectedTabIndex = pagerState.currentPage&#10;    }&#10;&#10;    Scaffold (&#10;        topBar = {&#10;            TAppBar(&#10;                title = {&#10;                    TSubAppbarHome(&#10;                      onAvatarClick = {&#10;                            navController.navigate(Screen.Setting.route)&#10;                      }&#10;                    )&#10;                },&#10;                navController = navController&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationMenu(&#10;                navController = navController&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column (&#10;            modifier = Modifier.fillMaxSize()&#10;                .padding(innerPadding))&#10;         {&#10;            //banner and search&#10;            when {&#10;                isLoading -&gt; {&#10;                    Text(&quot;Loading banners...&quot;)&#10;                }&#10;                errorMessage != null -&gt; {&#10;                    Log.d(&quot;BannerList&quot;, &quot;Banners: $errorMessage&quot;)&#10;                    Text(&quot;Error: $errorMessage&quot;)&#10;                }&#10;                banners.isEmpty() -&gt; {&#10;                    Text(&quot;Không có banner nào&quot;)&#10;                }&#10;                else -&gt; {&#10;                    BannerCarousel(&#10;                        banners = banners,&#10;                        pagerState = pagerStateBanner&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(TSizes.xs))&#10;            // brand&#10;            BrandHorizontalScroll(navController = navController)&#10;            Spacer(modifier = Modifier.height(TSizes.sm))&#10;&#10;            // Category tabs&#10;            ScrollableTabRow(&#10;                selectedTabIndex = selectedTabIndex,&#10;                edgePadding = 8.dp&#10;            ) {&#10;                categories.forEachIndexed { index, category -&gt;&#10;                    Tab(&#10;                        selected = selectedTabIndex == index,&#10;                        onClick = { selectedTabIndex = index },&#10;                        text = { Text(category.title) }&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(TSizes.sm))&#10;            HorizontalPager(&#10;                state = pagerState,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(220.dp)&#10;            ) { page -&gt;&#10;                val category = categories[page]&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                        .clip(RoundedCornerShape(26.dp))&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(id = category.imageRes),&#10;                        contentDescription = category.title,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.matchParentSize()&#10;                    )&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .matchParentSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(Color.Transparent, Color.Black.copy(alpha = 0.5f))&#10;                                )&#10;                            )&#10;                    )&#10;                    Text(&#10;                        text = category.title,&#10;                        color = Color.White,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(18.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>