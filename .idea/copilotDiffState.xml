<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wallify/navigation/main_navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wallify/navigation/main_navigation.kt" />
              <option name="originalContent" value="package com.example.wallify.navigation&#10;&#10;import SettingScreen&#10;import com.example.wallify.feature.wallify.product.all_product.AllProductScreen&#10;import StreakScreen&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.wallify.feature.wallify.home.HomeScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.core_model.Category&#10;import com.example.core_model.ProductModel&#10;import com.example.wallify.feature.authentication.screen.onboarding.OnBoardingScreen&#10;import com.example.wallify.feature.wallify.collections.CollectionScreen&#10;import com.example.wallify.feature.wallify.favorites.FavoritesScreen&#10;import com.example.wallify.feature.wallify.product.product_details.ProductDetailsScreen&#10;import com.example.wallify.utlis.route.Screen&#10;import com.google.gson.Gson&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.core_viewmodel.controller.onboarding.OnBoardingViewModel&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.wallify.feature.wallify.home.model.Image&#10;&#10;@Composable&#10;fun MainNavigation(navController: NavHostController) {&#10;    val onboardingViewModel: OnBoardingViewModel = hiltViewModel()&#10;    val context = LocalContext.current&#10;    val isFirstTimeState = onboardingViewModel.isFirstTime.collectAsState()&#10;    val isFirstTime = isFirstTimeState.value&#10;&#10;    LaunchedEffect(Unit) {&#10;        onboardingViewModel.loadIsFirstTime(context)&#10;    }&#10;&#10;    // Loading UI khi chưa có dữ liệu&#10;    if (isFirstTime == null) {&#10;        Box(modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    val startDestination = if (isFirstTime) Screen.OnBoarding.route else Screen.Home.route&#10;&#10;    NavHost(navController = navController, startDestination = startDestination) {&#10;        composable(Screen.OnBoarding.route) {&#10;            OnBoardingScreen(&#10;                onSkip = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.OnBoarding.route) { inclusive = true }&#10;                    }&#10;                },&#10;                viewModel = onboardingViewModel&#10;            )&#10;        }&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Screen.Streak.route){&#10;            StreakScreen(navController = navController)&#10;        }&#10;        composable(Screen.Collection.route){&#10;            CollectionScreen(navController = navController)&#10;        }&#10;        composable(Screen.Favorite.route){&#10;            FavoritesScreen()&#10;        }&#10;        composable(Screen.Setting.route){&#10;            SettingScreen(navController = navController)&#10;        }&#10;        // allProduct&#10;        composable(&quot;${Screen.ProductList.route}/{item}&quot;) { backStackEntry -&gt;&#10;            val categoryJson = backStackEntry.arguments?.getString(&quot;item&quot;)&#10;            val item = Gson().fromJson(categoryJson, Image::class.java)&#10;            AllProductScreen(item.title, navController)&#10;        }&#10;        // ProductDetails&#10;        composable(Screen.ProductDetails.route){ backStackEntry -&gt;&#10;            val product = backStackEntry.arguments?.getString(&quot;items&quot;)&#10;            val items = Gson().fromJson(product, ProductModel::class.java)&#10;            ProductDetailsScreen(items, navController)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.wallify.navigation&#10;&#10;import SettingScreen&#10;import com.example.wallify.feature.wallify.product.all_product.AllProductScreen&#10;import StreakScreen&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.wallify.feature.wallify.home.HomeScreen&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.core_model.Category&#10;import com.example.core_model.ProductModel&#10;import com.example.wallify.feature.authentication.screen.onboarding.OnBoardingScreen&#10;import com.example.wallify.feature.wallify.collections.CollectionScreen&#10;import com.example.wallify.feature.wallify.favorites.FavoritesScreen&#10;import com.example.wallify.feature.wallify.product.product_details.ProductDetailsScreen&#10;import com.example.wallify.utlis.route.Screen&#10;import com.google.gson.Gson&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.core_viewmodel.controller.onboarding.OnBoardingViewModel&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.example.wallify.feature.wallify.home.model.Image&#10;&#10;@Composable&#10;fun MainNavigation(navController: NavHostController) {&#10;    val onboardingViewModel: OnBoardingViewModel = hiltViewModel()&#10;    val context = LocalContext.current&#10;    val isFirstTimeState = onboardingViewModel.isFirstTime.collectAsState()&#10;    val isFirstTime = isFirstTimeState.value&#10;&#10;    LaunchedEffect(Unit) {&#10;        onboardingViewModel.loadIsFirstTime(context)&#10;    }&#10;&#10;    // Loading UI khi chưa có dữ liệu&#10;    if (isFirstTime == null) {&#10;        Box(modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    val startDestination = if (isFirstTime) Screen.OnBoarding.route else Screen.Home.route&#10;&#10;    NavHost(navController = navController, startDestination = startDestination) {&#10;        composable(Screen.OnBoarding.route) {&#10;            OnBoardingScreen(&#10;                onSkip = {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.OnBoarding.route) { inclusive = true }&#10;                    }&#10;                },&#10;                viewModel = onboardingViewModel&#10;            )&#10;        }&#10;        composable(Screen.Home.route) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Screen.Streak.route){&#10;            StreakScreen(navController = navController)&#10;        }&#10;        composable(Screen.Collection.route){&#10;            CollectionScreen(navController = navController)&#10;        }&#10;        composable(Screen.Favorite.route){&#10;            FavoritesScreen()&#10;        }&#10;        composable(Screen.Setting.route){&#10;            SettingScreen(navController = navController)&#10;        }&#10;        // allProduct&#10;        composable(&quot;${Screen.ProductList.route}/{item}&quot;) { backStackEntry -&gt;&#10;            val categoryJson = backStackEntry.arguments?.getString(&quot;item&quot;)&#10;            val item = Gson().fromJson(categoryJson, Image::class.java)&#10;            AllProductScreen(item.title, navController)&#10;        }&#10;        // ProductDetails&#10;        composable(Screen.ProductDetails.route){ backStackEntry -&gt;&#10;            val product = backStackEntry.arguments?.getString(&quot;items&quot;)&#10;            val items = Gson().fromJson(product, ProductModel::class.java)&#10;            ProductDetailsScreen(items, navController)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>