<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wallify/common/widgets/appbar/appbar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wallify/common/widgets/appbar/appbar.kt" />
              <option name="originalContent" value="package com.example.wallify.common.widgets.appbar&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.RowScope&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.utlis.route.routesToHideBottomBar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TAppBar(&#10;    title: @Composable (() -&gt; Unit)? = null,&#10;    showBackArrow: Boolean = false,&#10;    leadingIcon: ImageVector? = null,&#10;    actions: List&lt;@Composable RowScope.() -&gt; Unit&gt;? = null,&#10;    leadingOnPressed: (() -&gt; Unit)? = null,&#10;    horizontalPadding: Dp = TSizes.xs,&#10;) {&#10;    TopAppBar(&#10;        modifier = Modifier.padding(horizontal = horizontalPadding),&#10;        navigationIcon = {&#10;            when {&#10;                showBackArrow -&gt; {&#10;                    IconButton(onClick = {&#10;                        leadingOnPressed?.invoke()&#10;                    }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;                leadingIcon != null -&gt; {&#10;                    IconButton(onClick = { leadingOnPressed?.invoke() }) {&#10;                        Icon(&#10;                            imageVector = leadingIcon,&#10;                            contentDescription = &quot;Leading Icon&quot;&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        },&#10;        title = {&#10;            title?.invoke()&#10;        },&#10;        actions = {&#10;            actions?.forEach { action -&gt;&#10;                action()&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors()&#10;    )&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.wallify.common.widgets.appbar&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.RowScope&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.utlis.route.routesToHideBottomBar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TAppBar(&#10;    title: @Composable (() -&gt; Unit)? = null,&#10;    showBackArrow: Boolean = false,&#10;    leadingIcon: ImageVector? = null,&#10;    actions: List&lt;@Composable RowScope.() -&gt; Unit&gt;? = null,&#10;    leadingOnPressed: (() -&gt; Unit)? = null,&#10;    horizontalPadding: Dp = TSizes.xs,&#10;) {&#10;    TopAppBar(&#10;        modifier = Modifier.padding(horizontal = horizontalPadding),&#10;        navigationIcon = {&#10;            when {&#10;                showBackArrow -&gt; {&#10;                    IconButton(onClick = {&#10;                        leadingOnPressed?.invoke()&#10;                    }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;                leadingIcon != null -&gt; {&#10;                    IconButton(onClick = { leadingOnPressed?.invoke() }) {&#10;                        Icon(&#10;                            imageVector = leadingIcon,&#10;                            contentDescription = &quot;Leading Icon&quot;&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        },&#10;        title = {&#10;            title?.invoke()&#10;        },&#10;        actions = {&#10;            actions?.forEach { action -&gt;&#10;                action()&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors()&#10;    )&#10;}&#10;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wallify/feature/wallify/home/home_screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wallify/feature/wallify/home/home_screen.kt" />
              <option name="originalContent" value="package com.example.wallify.feature.wallify.home&#10;import android.annotation.SuppressLint&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.ScrollableTabRow&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.wallify.common.widgets.appbar.TAppBar&#10;import com.example.wallify.common.widgets.shimmer.TShimmerEffect&#10;import com.example.wallify.feature.wallify.home.viewmodel.BannerViewModel&#10;import com.example.wallify.feature.wallify.home.viewmodel.CategoryViewModel&#10;import com.example.wallify.feature.wallify.home.widgets.BannerCarousel&#10;import com.example.wallify.feature.wallify.home.widgets.TSubAppbarHome&#10;import com.example.wallify.feature.wallify.home.widgets.VerticalTopBar&#10;import com.example.wallify.navigation.NavigationMenu&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;&#10;@SuppressLint(&quot;FrequentlyChangingValue&quot;)&#10;@Composable&#10;fun HomeScreen(&#10;    navController: NavController,&#10;){&#10;    val bannerViewModel: BannerViewModel = hiltViewModel()&#10;    val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;    val banners by bannerViewModel.banners.collectAsState()&#10;    val isLoading = bannerViewModel.isLoading&#10;    val errorMessage = bannerViewModel.errorMessage&#10;    val categories by categoryViewModel.category.collectAsState()&#10;    // Load images for selected category&#10;    val imagesByCategory by categoryViewModel.imagesByCategory.collectAsState()&#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    val pagerState = rememberPagerState(pageCount = { categories.size })&#10;    val pagerStateBanner = rememberPagerState(pageCount = { banners.size })&#10;    val lazyListState = rememberLazyListState()&#10;    var showTopBar by rememberSaveable { mutableStateOf(true) }&#10;    var showBanner by rememberSaveable { mutableStateOf(true) }&#10;    val tabRowIndex = 0 // Banner = 0, TabRow = 1&#10;    LaunchedEffect(lazyListState.firstVisibleItemIndex, selectedTabIndex, lazyListState.firstVisibleItemScrollOffset) {&#10;        showTopBar = if (showTopBar) {&#10;            lazyListState.firstVisibleItemIndex == tabRowIndex &amp;&amp; lazyListState.firstVisibleItemScrollOffset == 0&#10;        } else {&#10;            if (lazyListState.firstVisibleItemScrollOffset == 0) true else showTopBar&#10;        }&#10;    }&#10;&#10;    // Sync pager and tab selection&#10;    LaunchedEffect(selectedTabIndex) {&#10;        pagerState.scrollToPage(selectedTabIndex)&#10;    }&#10;    LaunchedEffect(pagerState.currentPage) {&#10;        selectedTabIndex = pagerState.currentPage&#10;    }&#10;    LaunchedEffect(selectedTabIndex) {&#10;        val categoryId = categories.getOrNull(selectedTabIndex)?.id_cate&#10;        if (categoryId != null) {&#10;            categoryViewModel.fetchImagesForCategory(categoryId)&#10;            pagerState.scrollToPage(selectedTabIndex)&#10;        }&#10;    }&#10;&#10;    Scaffold (&#10;        topBar = {&#10;            VerticalTopBar(&#10;                topBar = {&#10;                    TSubAppbarHome {  }&#10;                },&#10;                banner = {&#10;                    when {&#10;                        isLoading -&gt; {&#10;                            TShimmerEffect(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .aspectRatio(1.9f)&#10;                                    .padding(horizontal = TSizes.defaultSpace)&#10;                                    .clip(RoundedCornerShape(24.dp))&#10;                            )&#10;                        }&#10;                        errorMessage != null -&gt; {&#10;                            Column(modifier = Modifier.fillMaxSize(),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.Center) {&#10;                                Text(&quot;Error: $errorMessage&quot;)&#10;                            }&#10;                        }&#10;                        banners.isEmpty() -&gt; {&#10;                            Text(&quot;Không có banner nào&quot;)&#10;                        }&#10;                        else -&gt; {&#10;                            BannerCarousel(&#10;                                banners = banners,&#10;                                pagerState = pagerStateBanner&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                tabRow = {&#10;                    when {&#10;                        categoryViewModel.isLoading -&gt; {&#10;                            TShimmerEffect(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(40.dp)&#10;                                    .padding(horizontal = TSizes.defaultSpace)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                            )&#10;                        }&#10;                        categories.isEmpty() -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(40.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&quot;Không có danh mục nào&quot;, color = Color.Gray)&#10;                            }&#10;                        }&#10;                        else -&gt; {&#10;                            ScrollableTabRow(&#10;                                selectedTabIndex = selectedTabIndex,&#10;                                edgePadding = 8.dp&#10;                            ) {&#10;                                categories.forEachIndexed { index, category -&gt;&#10;                                    Tab(&#10;                                        selected = selectedTabIndex == index,&#10;                                        onClick = { selectedTabIndex = index },&#10;                                        text = { Text(category.title) }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                showTopBar = showTopBar,&#10;                showBanner = showTopBar&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationMenu(&#10;                navController = navController&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        LazyColumn(&#10;            state = lazyListState,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            // Banner&#10;            item {&#10;                Spacer(modifier = Modifier.height(TSizes.sm))&#10;            }&#10;            // HorizontalPager cho ảnh từng category&#10;            item {&#10;                Spacer(modifier = Modifier.height(TSizes.sm))&#10;                if (categories.isNotEmpty()) {&#10;                    HorizontalPager(&#10;                        state = pagerState,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = innerPadding.calculateBottomPadding())&#10;                    ) { page -&gt;&#10;                        val category = categories[page]&#10;                        val images = imagesByCategory[category.id_cate] ?: emptyList()&#10;                        if (images.isEmpty()) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(16.dp)&#10;                                    .clip(RoundedCornerShape(26.dp)),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&quot;Không có ảnh cho category này&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(8.dp)&#10;                            ) {&#10;                                images.forEach { image -&gt;&#10;                                    Box(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .height(180.dp)&#10;                                            .padding(vertical = 4.dp)&#10;                                            .clip(RoundedCornerShape(16.dp))&#10;                                    ) {&#10;                                        AsyncImage(&#10;                                            model = image.url,&#10;                                            contentDescription = image.title,&#10;                                            contentScale = ContentScale.Crop,&#10;                                            modifier = Modifier&#10;                                                .fillMaxSize()&#10;                                        )&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .fillMaxSize()&#10;                                                .background(&#10;                                                    Brush.verticalGradient(&#10;                                                        colors = listOf(Color.Transparent, Color.Black.copy(alpha = 0.4f))&#10;                                                    )&#10;                                                )&#10;                                        )&#10;                                        Text(&#10;                                            text = image.title,&#10;                                            color = Color.White,&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            modifier = Modifier&#10;                                                .align(Alignment.BottomStart)&#10;                                                .padding(12.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.wallify.feature.wallify.home&#10;import android.annotation.SuppressLint&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.ScrollableTabRow&#10;import androidx.compose.material3.Tab&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import com.example.wallify.common.widgets.appbar.TAppBar&#10;import com.example.wallify.common.widgets.shimmer.TShimmerEffect&#10;import com.example.wallify.feature.wallify.home.viewmodel.BannerViewModel&#10;import com.example.wallify.feature.wallify.home.viewmodel.CategoryViewModel&#10;import com.example.wallify.feature.wallify.home.widgets.BannerCarousel&#10;import com.example.wallify.feature.wallify.home.widgets.TSubAppbarHome&#10;import com.example.wallify.feature.wallify.home.widgets.VerticalTopBar&#10;import com.example.wallify.navigation.NavigationMenu&#10;import com.example.wallify.utlis.constants.TSizes&#10;import com.example.wallify.utlis.route.Screen&#10;&#10;@SuppressLint(&quot;FrequentlyChangingValue&quot;)&#10;@Composable&#10;fun HomeScreen(&#10;    navController: NavController,&#10;){&#10;    val bannerViewModel: BannerViewModel = hiltViewModel()&#10;    val categoryViewModel: CategoryViewModel = hiltViewModel()&#10;    val banners by bannerViewModel.banners.collectAsState()&#10;    val isLoading = bannerViewModel.isLoading&#10;    val errorMessage = bannerViewModel.errorMessage&#10;    val categories by categoryViewModel.category.collectAsState()&#10;    // Load images for selected category&#10;    val imagesByCategory by categoryViewModel.imagesByCategory.collectAsState()&#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    val pagerState = rememberPagerState(pageCount = { categories.size })&#10;    val pagerStateBanner = rememberPagerState(pageCount = { banners.size })&#10;    val lazyListState = rememberLazyListState()&#10;    var showTopBar by rememberSaveable { mutableStateOf(true) }&#10;    var showBanner by rememberSaveable { mutableStateOf(true) }&#10;    val tabRowIndex = 0 // Banner = 0, TabRow = 1&#10;    LaunchedEffect(lazyListState.firstVisibleItemIndex, selectedTabIndex, lazyListState.firstVisibleItemScrollOffset) {&#10;        showTopBar = if (showTopBar) {&#10;            lazyListState.firstVisibleItemIndex == tabRowIndex &amp;&amp; lazyListState.firstVisibleItemScrollOffset == 0&#10;        } else {&#10;            if (lazyListState.firstVisibleItemScrollOffset == 0) true else showTopBar&#10;        }&#10;    }&#10;&#10;    // Sync pager and tab selection&#10;    LaunchedEffect(selectedTabIndex) {&#10;        pagerState.scrollToPage(selectedTabIndex)&#10;    }&#10;    LaunchedEffect(pagerState.currentPage) {&#10;        selectedTabIndex = pagerState.currentPage&#10;    }&#10;    LaunchedEffect(selectedTabIndex) {&#10;        val categoryId = categories.getOrNull(selectedTabIndex)?.id_cate&#10;        if (categoryId != null) {&#10;            categoryViewModel.fetchImagesForCategory(categoryId)&#10;            pagerState.scrollToPage(selectedTabIndex)&#10;        }&#10;    }&#10;&#10;    Scaffold (&#10;        topBar = {&#10;            VerticalTopBar(&#10;                topBar = {&#10;                    TSubAppbarHome {  }&#10;                },&#10;                banner = {&#10;                    when {&#10;                        isLoading -&gt; {&#10;                            TShimmerEffect(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .aspectRatio(1.9f)&#10;                                    .padding(horizontal = TSizes.defaultSpace)&#10;                                    .clip(RoundedCornerShape(24.dp))&#10;                            )&#10;                        }&#10;                        errorMessage != null -&gt; {&#10;                            Column(modifier = Modifier.fillMaxSize(),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.Center) {&#10;                                Text(&quot;Error: $errorMessage&quot;)&#10;                            }&#10;                        }&#10;                        banners.isEmpty() -&gt; {&#10;                            Text(&quot;Không có banner nào&quot;)&#10;                        }&#10;                        else -&gt; {&#10;                            BannerCarousel(&#10;                                banners = banners,&#10;                                pagerState = pagerStateBanner&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                tabRow = {&#10;                    when {&#10;                        categoryViewModel.isLoading -&gt; {&#10;                            TShimmerEffect(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(40.dp)&#10;                                    .padding(horizontal = TSizes.defaultSpace)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                            )&#10;                        }&#10;                        categories.isEmpty() -&gt; {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(40.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&quot;Không có danh mục nào&quot;, color = Color.Gray)&#10;                            }&#10;                        }&#10;                        else -&gt; {&#10;                            ScrollableTabRow(&#10;                                selectedTabIndex = selectedTabIndex,&#10;                                edgePadding = 8.dp&#10;                            ) {&#10;                                categories.forEachIndexed { index, category -&gt;&#10;                                    Tab(&#10;                                        selected = selectedTabIndex == index,&#10;                                        onClick = { selectedTabIndex = index },&#10;                                        text = { Text(category.title) }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                showTopBar = showTopBar,&#10;                showBanner = showTopBar&#10;            )&#10;        },&#10;        bottomBar = {&#10;            NavigationMenu(&#10;                navController = navController&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        LazyColumn(&#10;            state = lazyListState,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            // Banner&#10;            item {&#10;                Spacer(modifier = Modifier.height(TSizes.sm))&#10;            }&#10;            // HorizontalPager cho ảnh từng category&#10;            item {&#10;                Spacer(modifier = Modifier.height(TSizes.sm))&#10;                if (categories.isNotEmpty()) {&#10;                    HorizontalPager(&#10;                        state = pagerState,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = innerPadding.calculateBottomPadding())&#10;                    ) { page -&gt;&#10;                        val category = categories[page]&#10;                        val images = imagesByCategory[category.id_cate] ?: emptyList()&#10;                        if (images.isEmpty()) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(16.dp)&#10;                                    .clip(RoundedCornerShape(26.dp)),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&quot;Không có ảnh cho category này&quot;, color = Color.Gray)&#10;                            }&#10;                        } else {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(8.dp)&#10;                            ) {&#10;                                images.forEach { image -&gt;&#10;                                    Box(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .height(180.dp)&#10;                                            .padding(vertical = 4.dp)&#10;                                            .clip(RoundedCornerShape(16.dp))&#10;                                    ) {&#10;                                        AsyncImage(&#10;                                            model = image.url,&#10;                                            contentDescription = image.title,&#10;                                            contentScale = ContentScale.Crop,&#10;                                            modifier = Modifier&#10;                                                .fillMaxSize()&#10;                                        )&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .fillMaxSize()&#10;                                                .background(&#10;                                                    Brush.verticalGradient(&#10;                                                        colors = listOf(Color.Transparent, Color.Black.copy(alpha = 0.4f))&#10;                                                    )&#10;                                                )&#10;                                        )&#10;                                        Text(&#10;                                            text = image.title,&#10;                                            color = Color.White,&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            modifier = Modifier&#10;                                                .align(Alignment.BottomStart)&#10;                                                .padding(12.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wallify/navigation/navigation_menu.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wallify/navigation/navigation_menu.kt" />
              <option name="originalContent" value="package com.example.wallify.navigation&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.offset&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.filled.ShoppingCart&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.zIndex&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.core_model.BottomNavItem&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.R&#10;import com.example.wallify.utlis.route.routesToHideBottomBar&#10;import androidx.compose.ui.draw.clip&#10;&#10;@Composable&#10;fun NavigationMenu(&#10;    onCenterClick: () -&gt; Unit = {},&#10;    navController: NavController&#10;) {&#10;    val navItems = listOf(&#10;        BottomNavItem(Screen.Home.route, icon = null, imageRes = R.drawable.home),&#10;        BottomNavItem(Screen.Streak.route,icon = null, imageRes = R.drawable.public_01),&#10;        BottomNavItem(Screen.Collection.route,icon = null, imageRes = R.drawable.cards_star),&#10;        BottomNavItem(Screen.Favorite.route, icon = null, imageRes = R.drawable.favorite)&#10;    )&#10;    var selectedIndex by remember {&#10;        mutableIntStateOf(0)&#10;    }&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    var currentRoute = navBackStackEntry?.destination?.route&#10;    LaunchedEffect(navController.currentBackStackEntry) {&#10;        currentRoute = navController.currentBackStackEntry?.destination?.route&#10;        selectedIndex = navItems.indexOfFirst { it.label == currentRoute }&#10;    }&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 24.dp)&#10;    ) {&#10;        if (currentRoute !in routesToHideBottomBar) {&#10;            Row(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(64.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color.Transparent) // Nền trong suốt&#10;                    .shadow(16.dp, CircleShape),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                navItems.forEachIndexed { index, item -&gt;&#10;                    // Bỏ nút ở chính giữa, chỉ render các icon như các tab bình thường&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable {&#10;                                selectedIndex = index&#10;                                Log.d(&#10;                                    &quot;Navigation&quot;,&#10;                                    &quot;Click vào: ${item.label}, selectedIndex: $selectedIndex&quot;&#10;                                )&#10;                                navController.navigate(item.label)&#10;                            }&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(item.imageRes),&#10;                            contentDescription = item.label,&#10;                            tint = if (selectedIndex == index) Color(0xFF19D44B) else Color.Gray,&#10;                            modifier = Modifier.size(28.dp)&#10;                        )&#10;                        Text(&#10;                            text = item.label,&#10;                            color = if (selectedIndex == index) Color(0xFF19D44B) else Color.Gray,&#10;                            style = MaterialTheme.typography.labelMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.wallify.navigation&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.offset&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.filled.ShoppingCart&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.zIndex&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.example.core_model.BottomNavItem&#10;import com.example.wallify.utlis.route.Screen&#10;import com.example.wallify.R&#10;import com.example.wallify.utlis.route.routesToHideBottomBar&#10;import androidx.compose.ui.draw.clip&#10;&#10;@Composable&#10;fun NavigationMenu(&#10;    onCenterClick: () -&gt; Unit = {},&#10;    navController: NavController&#10;) {&#10;    val navItems = listOf(&#10;        BottomNavItem(Screen.Home.route, icon = null, imageRes = R.drawable.home),&#10;        BottomNavItem(Screen.Streak.route,icon = null, imageRes = R.drawable.public_01),&#10;        BottomNavItem(Screen.Collection.route,icon = null, imageRes = R.drawable.cards_star),&#10;        BottomNavItem(Screen.Favorite.route, icon = null, imageRes = R.drawable.favorite)&#10;    )&#10;    var selectedIndex by remember {&#10;        mutableIntStateOf(0)&#10;    }&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    var currentRoute = navBackStackEntry?.destination?.route&#10;    LaunchedEffect(navController.currentBackStackEntry) {&#10;        currentRoute = navController.currentBackStackEntry?.destination?.route&#10;        selectedIndex = navItems.indexOfFirst { it.label == currentRoute }&#10;    }&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 24.dp)&#10;    ) {&#10;        if (currentRoute !in routesToHideBottomBar) {&#10;            Row(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(64.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color.Transparent) // Nền trong suốt&#10;                    .shadow(16.dp, CircleShape),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                navItems.forEachIndexed { index, item -&gt;&#10;                    // Bỏ nút ở chính giữa, chỉ render các icon như các tab bình thường&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable {&#10;                                selectedIndex = index&#10;                                Log.d(&#10;                                    &quot;Navigation&quot;,&#10;                                    &quot;Click vào: ${item.label}, selectedIndex: $selectedIndex&quot;&#10;                                )&#10;                                navController.navigate(item.label)&#10;                            }&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(item.imageRes),&#10;                            contentDescription = item.label,&#10;                            tint = if (selectedIndex == index) Color(0xFF19D44B) else Color.Gray,&#10;                            modifier = Modifier.size(28.dp)&#10;                        )&#10;                        Text(&#10;                            text = item.label,&#10;                            color = if (selectedIndex == index) Color(0xFF19D44B) else Color.Gray,&#10;                            style = MaterialTheme.typography.labelMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>